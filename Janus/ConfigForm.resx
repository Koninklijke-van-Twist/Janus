<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALBr
        AwC2cgMVpmEDEqpkAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADQjwEA/8gAA8J9AYmgWAJ/AgAAAZJJAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAz48BANKQAQDUkgBAyIUB7ZtSAueRSAI3k0oCAItIAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADRkAAA0ZABENORALfKhgH/mlEC/5JJAqyRSgILkkoCAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA0I4CANeSAADSkABr1JEA+8qGAf+aUQL/k0oC+JNKAWCUSgIAkUoBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSkAAA0pAAKNOQANrUkQD/yoYB/5lRAv+TSgL/k0oC0pJK
        AiGSSgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0Y8BANCOAQbSkACZ05AA/9SRAP/KhgH/mlEC/5NK
        Av+TSgL/kkoCjY9JAQORSgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM+PAQDTkAAA0pAATdOQAPHTkAD/1JEA/8qG
        Af+ZUQL/k0oC/5NKAv+TSgLtkkoCQ5JKAgCTSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0ZAAANCQABbSkADD05AA/9OQ
        AP/UkQD/yoYB/5pRAv+TSgL/k0oC/5NKAv+TSgK5kUoBEZFKAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGQAQD/nQAA0pAAedOQ
        AP3TkAD/05AA/9SRAP/KhgH/mlEC/5NKAv+TSgL/k0oC/5NKAvuTSgJulkwCAJBJAwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJjgAA05AAANKQ
        ADPTkADj05AA/9OQAP/TkAD/1JEA/8qGAf+ZUQL/k0oC/5NKAv+TSgL/k0oC/5NKAtySSgEqk0oBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANKP
        AQDRjwEJ05AAp9OQAP/TkAD/05AA/9OQAP/UkQD/yoYB/5pRAv+TSgL/k0oC/5NKAv+TSgL/k0oC/5NK
        ApuSSQEGkkkBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADQjwEA1JAAANKPAVrTkAD205AA/9OQAP/TkAD/05AA/9SRAP/KhgH/mVEC/5NKAv+TSgL/k0oC/5NK
        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
        GD/8fD4//n5+f/w8PD/8PDw//Dw8P/5+fn8=
</value>
  </data>
</root>